//Collin Struthers 1084915 A3
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <float.h>
#include <ctype.h>
#include <stdbool.h>
#define MAX_LENGTH 44049

int badchar[256];
int goodchar[256];
int max(int a, int b) { return (a > b) ? a : b; }
void badchartable(char *pattern)
{
    int i;
    int patternlength = strlen(pattern) - 1;
    for (i = 0; i < 256; i++)
    {
        badchar[i] = -1;
    }
    for (i = 0; i < patternlength - 1; i++)
    {
        badchar[(int)pattern[i]] = i;
    }
}
void goodchartable(char *pattern)
{
    int patternlength = strlen(pattern) - 1;
    int i, j;
    int *suff = malloc((patternlength + 1) * sizeof(int));
    suff[patternlength] = patternlength;
    j = patternlength;
    for (i = patternlength - 1; i >= 0; i--)
    {
        if ((j == patternlength || pattern[i] == pattern[j]) && i < j)
        {
            j--;
        }
        suff[i] = j;
    }
    for (i = 0; i < patternlength; i++)
    {
        goodchar[i] = patternlength;
    }
    for (i = patternlength - 1; i >= 0; i--)
    {
        if (suff[i] == i + 1)
        {
            for (; j < patternlength - 1 - i; j++)
            {
                if (goodchar[j] == patternlength)
                {
                    goodchar[j] = patternlength = 1 - i;
                }
            }
        }
    }
}

void boyermoore(char *text, char *pattern)
{
    struct timespec start, end;
    int length, i, matchsofar, patterncount, patternlength, shifts;
    patternlength = strlen(pattern) - 1;
    patterncount = 0;
    shifts = 0;
    length = strlen(text);
    timespec_get(&start, TIME_UTC);
    goodchartable(pattern);
    badchartable(pattern);
    // int max = 0;

    // while (fgets(currentword, 512, fp) != NULL)
    // {
    i = 0;
    int j = 0;
    while (j <= length - patternlength)
    {
        // printf("pattern length start=%d\n", patternlength);
        // printf("i=%d\n", i);
        i = patternlength - 1;

        // printf("pattern: %c text: %c i+j=%d\n", pattern[i], text[i + j], i + j);
        while (i >= 0 && (pattern[i] == text[i + j]))
        {
            // printf("gets here\n");
            i--;
        }
        // printf("matchsofar=%d patternlength=%d\n", matchsofar, patternlength);

        if (i < 0)
        {
            patterncount++;
            j += (j + patternlength < length) ? patternlength - badchar[(int)text[j + patternlength]] : 1;
        }
        else
        {
            // max = badchar[(int)text[j + i] - patternlength + 1 + i];
            // if (goodchar[i] > max)
            // {
            //     max = goodchar[i];
            // }
            // printf("j before=%d\n", j);
            // printf("text thingy= %d\n", i - badchar[(int)text[i + j]]);
            j += max(1, i - badchar[(int)text[i + j]]);
            // printf(" j after=%d\n\n", j);
        }

        shifts++;
        // printf("%d %c\n", table[(int)text[i]], text[i]);
    }
    // }
    timespec_get(&end, TIME_UTC);
    long int elapsed_time_ns = (end.tv_sec - start.tv_sec) * 1000 + (end.tv_nsec - start.tv_nsec) / 1000000.0;

    printf("Count = %d\n", patterncount);
    printf("Shifts= %d\n", shifts);
    printf("Elapsed time: %ld ms\n", elapsed_time_ns);
}

int main(void)
{
    FILE *fp;
    //opening file
    fp = fopen("data_A3_Q2.txt", "r");
    char pattern[52];
    long filesize;
    if (fp == NULL)
    {
        printf("Error Failure to open file\n");
        exit(1);
    }
    printf("Brute Force String Search\n");
    fseek(fp, 0, SEEK_END);
    filesize = ftell(fp);
    rewind(fp);
    // buffer = malloc(sizeof(char) * size);
    // pattern = malloc(sizeof(char) * size);
    //putting it into aray
    // fread(buf, size, 1, fp);

    printf("Please enter the pattern: \n");
    fgets(pattern, 52, stdin);
    char *text = malloc(sizeof(char) * filesize + 1);
    fread(text, 1, filesize, fp);

    // for (int i = 0; i < strlen(text); i++)
    // {
    //     if (isalpha(text[i]))
    //     {
    //     }
    //     else
    //     {
    //         text[i] = ' ';
    //     }
    // }
    text[filesize] = '\0';
    // printf("%s\n", text);

    boyermoore(text, pattern);
    // free(buf);
    // free(pattern);
    free(text);

    fclose(fp);
}
//Collin Struthers mar 12 2023 1084915 A3
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <float.h>
#include <ctype.h>
#include <stdbool.h>
#include <string.h>
#define MAX_LENGTH 30000

int cmp(const void *a, const void *b)
{
    int x = *((int *)a);
    int y = *((int *)b);
    return (x < y) ? -1 : (x > y);
}

int max_common_intervals(int intervals[][2], int size)
{
    // Collect all the points of the intervals in a sorted array
    int *sorted = malloc(sizeof(int) * (2 * size));
    int max_endpoint = 0;
    struct timespec start, end;

    for (int i = 0; i < size; i++)
    {
        sorted[2 * i] = intervals[i][0];
        sorted[2 * i + 1] = intervals[i][1];
        if (intervals[i][1] > max_endpoint)
            max_endpoint = intervals[i][1];
    }

    qsort(sorted, 2 * size, sizeof(int), cmp);

    // Find the maximum number of intervals that have a common point
    int max_count = 0;
    int count = 0;
    int final_point = 0;
    timespec_get(&start, TIME_UTC);
    for (int i = 1; i < 2 * size - 1; i++)
    {
        count = 0;

        for (int j = 0; j < size; j++)
        {
            //checks if the value of the enpoint is between the interval left and right side
            if (intervals[j][0] < sorted[i] && sorted[i] < intervals[j][1])
                count++;
        }
        if (count > max_count)
        {
            max_count = count;
            final_point = sorted[i];
        }
    }
    timespec_get(&end, TIME_UTC);
    long int elapsed_time_ns = (end.tv_sec - start.tv_sec) * 1000 + (end.tv_nsec - start.tv_nsec) / 1000000.0;
    printf("The maximum number of intervals: %d\n", max_count);
    printf("the interval include the point %d\n", final_point);
    printf("Elapsed time: %ld ms\n", elapsed_time_ns);
    free(sorted);
    return max_count;
}

int main(void)
{
    FILE *fp;
    int n1, n2;
    int count = 0;
    char filename[100];

    // Get file name from user
    printf("Please enter file name: ");
    fgets(filename, 100, stdin);
    filename[strcspn(filename, "\n")] = '\0';
    // Open file
    fp = fopen(filename, "r");
    if (fp == NULL)
    {
        printf("Error: Failure to open file\n");
        exit(1);
    }

    // Get number of intervals in file
    while (fscanf(fp, "%d %d", &n1, &n2) == 2)
        count++;

    // Reset file pointer to beginning of file
    fseek(fp, 0, SEEK_SET);

    // Read intervals from file
    int intervals[count][2];
    for (int i = 0; i < count; i++)
        fscanf(fp, "%d %d", &intervals[i][0], &intervals[i][1]);

    // Find maximum number of common intervals
    max_common_intervals(intervals, count);

    fclose(fp);
    return 0;
}
